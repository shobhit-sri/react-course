{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","cardMonsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","monsters","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUACaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCFbC,EAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GAER,qBAAKC,UAAU,YAAf,SACKD,EAAMW,aAAaC,KAChB,SAAAR,GAAO,OACH,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCP1BQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOd,UAAU,SAASe,KAAK,SAASF,YAAaA,EAC9CG,SAAUF,MCgCNG,E,kDA7Bb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,SAAU,GACVC,YAAa,IAJH,E,qDAOd,WAAqB,IAAD,OAClBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACP,SAASM,S,oBAG7C,WAAU,IAAD,OACP,EAAmCE,KAAKT,MAAhCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,YACZQ,EAAmBT,EAASU,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASX,EAAYU,kBAEpD,OACA,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWa,YAAY,kBAChBC,aAAc,SAAAkB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAC/D,cAAC,EAAD,CAAUxB,aAAckB,W,GAzBZO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c32df8a4.chunk.js","sourcesContent":["import './card.styles.css'\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set3`}/>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n)\n\n","import './card-list.styles.css'\nimport {Card} from \"../card/card.component\";\n\nexport const CardList = (props) => {\n    console.log(props);\n    return (\n        <div className='card-list'>\n            {props.cardMonsters.map(\n                monster => (\n                    <Card key={monster.id} monster={monster}/>\n                )\n            )}\n        </div>\n    )\n}","import './search-box.styles.css'\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input className='search' type='search' placeholder={placeholder}\n           onChange={handleChange}/>\n)","import './App.css';\nimport {Component} from \"react\";\nimport {CardList} from \"./component/card-list/card-list.component\";\nimport {SearchBox} from \"./component/search-box/search-box.component\";\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({monsters:users}))\n  }\n\n  render() {\n    const { monsters, searchField } =  this.state;\n    const filteredMonsters = monsters.filter(monster =>\n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return(\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder='search monsters'\n             handleChange={e => this.setState({searchField: e.target.value})}/>\n      <CardList cardMonsters={filteredMonsters}/>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}